<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="581.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="43161"><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (23 samples, 0.05%)</title><rect x="0.0070%" y="501" width="0.0533%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="23"/><text x="0.2570%" y="511.50"></text></g><g><title>[[heap]] (28 samples, 0.06%)</title><rect x="0.0000%" y="517" width="0.0649%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="28"/><text x="0.2500%" y="527.50"></text></g><g><title>[[stack]] (11 samples, 0.03%)</title><rect x="0.0649%" y="517" width="0.0255%" height="15" fill="rgb(221,193,54)" fg:x="28" fg:w="11"/><text x="0.3149%" y="527.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (10 samples, 0.02%)</title><rect x="0.0672%" y="501" width="0.0232%" height="15" fill="rgb(248,212,6)" fg:x="29" fg:w="10"/><text x="0.3172%" y="511.50"></text></g><g><title>[anon] (7 samples, 0.02%)</title><rect x="0.0904%" y="517" width="0.0162%" height="15" fill="rgb(208,68,35)" fg:x="39" fg:w="7"/><text x="0.3404%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.06%)</title><rect x="0.1089%" y="501" width="0.0579%" height="15" fill="rgb(232,128,0)" fg:x="47" fg:w="25"/><text x="0.3589%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (198 samples, 0.46%)</title><rect x="0.1691%" y="501" width="0.4587%" height="15" fill="rgb(207,160,47)" fg:x="73" fg:w="198"/><text x="0.4191%" y="511.50"></text></g><g><title>day15::best_path_cost (137 samples, 0.32%)</title><rect x="0.6279%" y="501" width="0.3174%" height="15" fill="rgb(228,23,34)" fg:x="271" fg:w="137"/><text x="0.8779%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::erase_entry (7 samples, 0.02%)</title><rect x="0.9453%" y="501" width="0.0162%" height="15" fill="rgb(218,30,26)" fg:x="408" fg:w="7"/><text x="1.1953%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (43 samples, 0.10%)</title><rect x="0.9615%" y="501" width="0.0996%" height="15" fill="rgb(220,122,19)" fg:x="415" fg:w="43"/><text x="1.2115%" y="511.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (375 samples, 0.87%)</title><rect x="1.0611%" y="501" width="0.8688%" height="15" fill="rgb(250,228,42)" fg:x="458" fg:w="375"/><text x="1.3111%" y="511.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (113 samples, 0.26%)</title><rect x="1.9300%" y="501" width="0.2618%" height="15" fill="rgb(240,193,28)" fg:x="833" fg:w="113"/><text x="2.1800%" y="511.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (36 samples, 0.08%)</title><rect x="2.1918%" y="501" width="0.0834%" height="15" fill="rgb(216,20,37)" fg:x="946" fg:w="36"/><text x="2.4418%" y="511.50"></text></g><g><title>indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (89 samples, 0.21%)</title><rect x="2.2752%" y="501" width="0.2062%" height="15" fill="rgb(206,188,39)" fg:x="982" fg:w="89"/><text x="2.5252%" y="511.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (60 samples, 0.14%)</title><rect x="2.4814%" y="501" width="0.1390%" height="15" fill="rgb(217,207,13)" fg:x="1071" fg:w="60"/><text x="2.7314%" y="511.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (598 samples, 1.39%)</title><rect x="2.6204%" y="501" width="1.3855%" height="15" fill="rgb(231,73,38)" fg:x="1131" fg:w="598"/><text x="2.8704%" y="511.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (282 samples, 0.65%)</title><rect x="4.0059%" y="501" width="0.6534%" height="15" fill="rgb(225,20,46)" fg:x="1729" fg:w="282"/><text x="4.2559%" y="511.50"></text></g><g><title>priority_queue::priority_queue::left (137 samples, 0.32%)</title><rect x="4.6593%" y="501" width="0.3174%" height="15" fill="rgb(210,31,41)" fg:x="2011" fg:w="137"/><text x="4.9093%" y="511.50"></text></g><g><title>priority_queue::priority_queue::parent (19 samples, 0.04%)</title><rect x="4.9767%" y="501" width="0.0440%" height="15" fill="rgb(221,200,47)" fg:x="2148" fg:w="19"/><text x="5.2267%" y="511.50"></text></g><g><title>priority_queue::priority_queue::right (169 samples, 0.39%)</title><rect x="5.0207%" y="501" width="0.3916%" height="15" fill="rgb(226,26,5)" fg:x="2167" fg:w="169"/><text x="5.2707%" y="511.50"></text></g><g><title>[unknown] (2,330 samples, 5.40%)</title><rect x="0.1066%" y="517" width="5.3984%" height="15" fill="rgb(249,33,26)" fg:x="46" fg:w="2330"/><text x="0.3566%" y="527.50">[unknow..</text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (40 samples, 0.09%)</title><rect x="5.4123%" y="501" width="0.0927%" height="15" fill="rgb(235,183,28)" fg:x="2336" fg:w="40"/><text x="5.6623%" y="511.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (3,592 samples, 8.32%)</title><rect x="10.2639%" y="245" width="8.3223%" height="15" fill="rgb(221,5,38)" fg:x="4430" fg:w="3592"/><text x="10.5139%" y="255.50">indexmap::ma..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2,000 samples, 4.63%)</title><rect x="13.9524%" y="229" width="4.6338%" height="15" fill="rgb(247,18,42)" fg:x="6022" fg:w="2000"/><text x="14.2024%" y="239.50">core:..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (17,945 samples, 41.58%)</title><rect x="18.5862%" y="245" width="41.5769%" height="15" fill="rgb(241,131,45)" fg:x="8022" fg:w="17945"/><text x="18.8362%" y="255.50">indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of</text></g><g><title>[unknown] (32 samples, 0.07%)</title><rect x="60.0890%" y="229" width="0.0741%" height="15" fill="rgb(249,31,29)" fg:x="25935" fg:w="32"/><text x="60.3390%" y="239.50"></text></g><g><title>[unknown] (30 samples, 0.07%)</title><rect x="60.0936%" y="213" width="0.0695%" height="15" fill="rgb(225,111,53)" fg:x="25937" fg:w="30"/><text x="60.3436%" y="223.50"></text></g><g><title>[unknown] (30 samples, 0.07%)</title><rect x="60.0936%" y="197" width="0.0695%" height="15" fill="rgb(238,160,17)" fg:x="25937" fg:w="30"/><text x="60.3436%" y="207.50"></text></g><g><title>[unknown] (29 samples, 0.07%)</title><rect x="60.0959%" y="181" width="0.0672%" height="15" fill="rgb(214,148,48)" fg:x="25938" fg:w="29"/><text x="60.3459%" y="191.50"></text></g><g><title>[unknown] (26 samples, 0.06%)</title><rect x="60.1029%" y="165" width="0.0602%" height="15" fill="rgb(232,36,49)" fg:x="25941" fg:w="26"/><text x="60.3529%" y="175.50"></text></g><g><title>[unknown] (25 samples, 0.06%)</title><rect x="60.1052%" y="149" width="0.0579%" height="15" fill="rgb(209,103,24)" fg:x="25942" fg:w="25"/><text x="60.3552%" y="159.50"></text></g><g><title>[unknown] (23 samples, 0.05%)</title><rect x="60.1098%" y="133" width="0.0533%" height="15" fill="rgb(229,88,8)" fg:x="25944" fg:w="23"/><text x="60.3598%" y="143.50"></text></g><g><title>[unknown] (23 samples, 0.05%)</title><rect x="60.1098%" y="117" width="0.0533%" height="15" fill="rgb(213,181,19)" fg:x="25944" fg:w="23"/><text x="60.3598%" y="127.50"></text></g><g><title>[unknown] (23 samples, 0.05%)</title><rect x="60.1098%" y="101" width="0.0533%" height="15" fill="rgb(254,191,54)" fg:x="25944" fg:w="23"/><text x="60.3598%" y="111.50"></text></g><g><title>[unknown] (21 samples, 0.05%)</title><rect x="60.1145%" y="85" width="0.0487%" height="15" fill="rgb(241,83,37)" fg:x="25946" fg:w="21"/><text x="60.3645%" y="95.50"></text></g><g><title>[unknown] (18 samples, 0.04%)</title><rect x="60.1214%" y="69" width="0.0417%" height="15" fill="rgb(233,36,39)" fg:x="25949" fg:w="18"/><text x="60.3714%" y="79.50"></text></g><g><title>[unknown] (11 samples, 0.03%)</title><rect x="60.1376%" y="53" width="0.0255%" height="15" fill="rgb(226,3,54)" fg:x="25956" fg:w="11"/><text x="60.3876%" y="63.50"></text></g><g><title>[unknown] (10 samples, 0.02%)</title><rect x="60.1399%" y="37" width="0.0232%" height="15" fill="rgb(245,192,40)" fg:x="25957" fg:w="10"/><text x="60.3899%" y="47.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="86.7218%" y="229" width="0.0301%" height="15" fill="rgb(238,167,29)" fg:x="37430" fg:w="13"/><text x="86.9718%" y="239.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="86.7311%" y="213" width="0.0209%" height="15" fill="rgb(232,182,51)" fg:x="37434" fg:w="9"/><text x="86.9811%" y="223.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="86.7311%" y="197" width="0.0209%" height="15" fill="rgb(231,60,39)" fg:x="37434" fg:w="9"/><text x="86.9811%" y="207.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="86.7311%" y="181" width="0.0209%" height="15" fill="rgb(208,69,12)" fg:x="37434" fg:w="9"/><text x="86.9811%" y="191.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="86.7311%" y="165" width="0.0209%" height="15" fill="rgb(235,93,37)" fg:x="37434" fg:w="9"/><text x="86.9811%" y="175.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="86.7311%" y="149" width="0.0209%" height="15" fill="rgb(213,116,39)" fg:x="37434" fg:w="9"/><text x="86.9811%" y="159.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="86.7311%" y="133" width="0.0209%" height="15" fill="rgb(222,207,29)" fg:x="37434" fg:w="9"/><text x="86.9811%" y="143.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="86.7311%" y="117" width="0.0209%" height="15" fill="rgb(206,96,30)" fg:x="37434" fg:w="9"/><text x="86.9811%" y="127.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="86.7311%" y="101" width="0.0209%" height="15" fill="rgb(218,138,4)" fg:x="37434" fg:w="9"/><text x="86.9811%" y="111.50"></text></g><g><title>[unknown] (7 samples, 0.02%)</title><rect x="86.7357%" y="85" width="0.0162%" height="15" fill="rgb(250,191,14)" fg:x="37436" fg:w="7"/><text x="86.9857%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="86.7403%" y="69" width="0.0116%" height="15" fill="rgb(239,60,40)" fg:x="37438" fg:w="5"/><text x="86.9903%" y="79.50"></text></g><g><title>priority_queue::priority_queue::left (161 samples, 0.37%)</title><rect x="86.7519%" y="229" width="0.3730%" height="15" fill="rgb(206,27,48)" fg:x="37443" fg:w="161"/><text x="87.0019%" y="239.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (11,779 samples, 27.29%)</title><rect x="60.1631%" y="245" width="27.2908%" height="15" fill="rgb(225,35,8)" fg:x="25967" fg:w="11779"/><text x="60.4131%" y="255.50">priority_queue::priority_queue::PriorityQueu..</text></g><g><title>priority_queue::priority_queue::right (142 samples, 0.33%)</title><rect x="87.1250%" y="229" width="0.3290%" height="15" fill="rgb(250,213,24)" fg:x="37604" fg:w="142"/><text x="87.3750%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (190 samples, 0.44%)</title><rect x="88.5220%" y="229" width="0.4402%" height="15" fill="rgb(247,123,22)" fg:x="38207" fg:w="190"/><text x="88.7720%" y="239.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1,088 samples, 2.52%)</title><rect x="88.9692%" y="229" width="2.5208%" height="15" fill="rgb(231,138,38)" fg:x="38400" fg:w="1088"/><text x="89.2192%" y="239.50">in..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (479 samples, 1.11%)</title><rect x="90.3802%" y="213" width="1.1098%" height="15" fill="rgb(231,145,46)" fg:x="39009" fg:w="479"/><text x="90.6302%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="91.4784%" y="197" width="0.0116%" height="15" fill="rgb(251,118,11)" fg:x="39483" fg:w="5"/><text x="91.7284%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="91.4784%" y="181" width="0.0116%" height="15" fill="rgb(217,147,25)" fg:x="39483" fg:w="5"/><text x="91.7284%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="91.4784%" y="165" width="0.0116%" height="15" fill="rgb(247,81,37)" fg:x="39483" fg:w="5"/><text x="91.7284%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="91.4784%" y="149" width="0.0116%" height="15" fill="rgb(209,12,38)" fg:x="39483" fg:w="5"/><text x="91.7284%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="91.4784%" y="133" width="0.0116%" height="15" fill="rgb(227,1,9)" fg:x="39483" fg:w="5"/><text x="91.7284%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="91.4784%" y="117" width="0.0116%" height="15" fill="rgb(248,47,43)" fg:x="39483" fg:w="5"/><text x="91.7284%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="91.4784%" y="101" width="0.0116%" height="15" fill="rgb(221,10,30)" fg:x="39483" fg:w="5"/><text x="91.7284%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="91.4784%" y="85" width="0.0116%" height="15" fill="rgb(210,229,1)" fg:x="39483" fg:w="5"/><text x="91.7284%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="91.4784%" y="69" width="0.0116%" height="15" fill="rgb(222,148,37)" fg:x="39483" fg:w="5"/><text x="91.7284%" y="79.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="91.4784%" y="53" width="0.0116%" height="15" fill="rgb(234,67,33)" fg:x="39483" fg:w="5"/><text x="91.7284%" y="63.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="91.4784%" y="37" width="0.0116%" height="15" fill="rgb(247,98,35)" fg:x="39483" fg:w="5"/><text x="91.7284%" y="47.50"></text></g><g><title>indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (1,195 samples, 2.77%)</title><rect x="91.4900%" y="229" width="2.7687%" height="15" fill="rgb(247,138,52)" fg:x="39488" fg:w="1195"/><text x="91.7400%" y="239.50">in..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (751 samples, 1.74%)</title><rect x="92.5187%" y="213" width="1.7400%" height="15" fill="rgb(213,79,30)" fg:x="39932" fg:w="751"/><text x="92.7687%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.02%)</title><rect x="94.2402%" y="197" width="0.0185%" height="15" fill="rgb(246,177,23)" fg:x="40675" fg:w="8"/><text x="94.4902%" y="207.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (3,126 samples, 7.24%)</title><rect x="87.4540%" y="245" width="7.2426%" height="15" fill="rgb(230,62,27)" fg:x="37746" fg:w="3126"/><text x="87.7040%" y="255.50">priority_q..</text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (189 samples, 0.44%)</title><rect x="94.2587%" y="229" width="0.4379%" height="15" fill="rgb(216,154,8)" fg:x="40683" fg:w="189"/><text x="94.5087%" y="239.50"></text></g><g><title>priority_queue::priority_queue::parent (22 samples, 0.05%)</title><rect x="94.6456%" y="213" width="0.0510%" height="15" fill="rgb(244,35,45)" fg:x="40850" fg:w="22"/><text x="94.8956%" y="223.50"></text></g><g><title>__libc_start_main_alias_2 (40,776 samples, 94.47%)</title><rect x="5.5050%" y="501" width="94.4742%" height="15" fill="rgb(251,115,12)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="511.50">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (40,776 samples, 94.47%)</title><rect x="5.5050%" y="485" width="94.4742%" height="15" fill="rgb(240,54,50)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="495.50">__libc_start_call_main</text></g><g><title>main (40,776 samples, 94.47%)</title><rect x="5.5050%" y="469" width="94.4742%" height="15" fill="rgb(233,84,52)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (40,776 samples, 94.47%)</title><rect x="5.5050%" y="453" width="94.4742%" height="15" fill="rgb(207,117,47)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (40,776 samples, 94.47%)</title><rect x="5.5050%" y="437" width="94.4742%" height="15" fill="rgb(249,43,39)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (40,776 samples, 94.47%)</title><rect x="5.5050%" y="421" width="94.4742%" height="15" fill="rgb(209,38,44)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (40,776 samples, 94.47%)</title><rect x="5.5050%" y="405" width="94.4742%" height="15" fill="rgb(236,212,23)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="415.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (40,776 samples, 94.47%)</title><rect x="5.5050%" y="389" width="94.4742%" height="15" fill="rgb(242,79,21)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="399.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (40,776 samples, 94.47%)</title><rect x="5.5050%" y="373" width="94.4742%" height="15" fill="rgb(211,96,35)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="383.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (40,776 samples, 94.47%)</title><rect x="5.5050%" y="357" width="94.4742%" height="15" fill="rgb(253,215,40)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="367.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (40,776 samples, 94.47%)</title><rect x="5.5050%" y="341" width="94.4742%" height="15" fill="rgb(211,81,21)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="351.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (40,776 samples, 94.47%)</title><rect x="5.5050%" y="325" width="94.4742%" height="15" fill="rgb(208,190,38)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="335.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (40,776 samples, 94.47%)</title><rect x="5.5050%" y="309" width="94.4742%" height="15" fill="rgb(235,213,38)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="319.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (40,776 samples, 94.47%)</title><rect x="5.5050%" y="293" width="94.4742%" height="15" fill="rgb(237,122,38)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="303.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>day15::main (40,776 samples, 94.47%)</title><rect x="5.5050%" y="277" width="94.4742%" height="15" fill="rgb(244,218,35)" fg:x="2376" fg:w="40776"/><text x="5.7550%" y="287.50">day15::main</text></g><g><title>day15::best_path_cost (40,775 samples, 94.47%)</title><rect x="5.5073%" y="261" width="94.4719%" height="15" fill="rgb(240,68,47)" fg:x="2377" fg:w="40775"/><text x="5.7573%" y="271.50">day15::best_path_cost</text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (2,280 samples, 5.28%)</title><rect x="94.6966%" y="245" width="5.2825%" height="15" fill="rgb(210,16,53)" fg:x="40872" fg:w="2280"/><text x="94.9466%" y="255.50">priori..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (2,101 samples, 4.87%)</title><rect x="95.1113%" y="229" width="4.8678%" height="15" fill="rgb(235,124,12)" fg:x="41051" fg:w="2101"/><text x="95.3613%" y="239.50">indexm..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::erase_entry (1,487 samples, 3.45%)</title><rect x="96.5339%" y="213" width="3.4452%" height="15" fill="rgb(224,169,11)" fg:x="41665" fg:w="1487"/><text x="96.7839%" y="223.50">has..</text></g><g><title>_start (40,777 samples, 94.48%)</title><rect x="5.5050%" y="517" width="94.4765%" height="15" fill="rgb(250,166,2)" fg:x="2376" fg:w="40777"/><text x="5.7550%" y="527.50">_start</text></g><g><title>day15 (43,155 samples, 99.99%)</title><rect x="0.0000%" y="533" width="99.9861%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="43155"/><text x="0.2500%" y="543.50">day15</text></g><g><title>all (43,161 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="43161"/><text x="0.2500%" y="559.50"></text></g><g><title>perf-exec (6 samples, 0.01%)</title><rect x="99.9861%" y="533" width="0.0139%" height="15" fill="rgb(228,99,48)" fg:x="43155" fg:w="6"/><text x="100.2361%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9861%" y="517" width="0.0139%" height="15" fill="rgb(253,11,6)" fg:x="43155" fg:w="6"/><text x="100.2361%" y="527.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9861%" y="501" width="0.0139%" height="15" fill="rgb(247,143,39)" fg:x="43155" fg:w="6"/><text x="100.2361%" y="511.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9861%" y="485" width="0.0139%" height="15" fill="rgb(236,97,10)" fg:x="43155" fg:w="6"/><text x="100.2361%" y="495.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9861%" y="469" width="0.0139%" height="15" fill="rgb(233,208,19)" fg:x="43155" fg:w="6"/><text x="100.2361%" y="479.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9861%" y="453" width="0.0139%" height="15" fill="rgb(216,164,2)" fg:x="43155" fg:w="6"/><text x="100.2361%" y="463.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9861%" y="437" width="0.0139%" height="15" fill="rgb(220,129,5)" fg:x="43155" fg:w="6"/><text x="100.2361%" y="447.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9861%" y="421" width="0.0139%" height="15" fill="rgb(242,17,10)" fg:x="43155" fg:w="6"/><text x="100.2361%" y="431.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9861%" y="405" width="0.0139%" height="15" fill="rgb(242,107,0)" fg:x="43155" fg:w="6"/><text x="100.2361%" y="415.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9861%" y="389" width="0.0139%" height="15" fill="rgb(251,28,31)" fg:x="43155" fg:w="6"/><text x="100.2361%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9861%" y="373" width="0.0139%" height="15" fill="rgb(233,223,10)" fg:x="43155" fg:w="6"/><text x="100.2361%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9861%" y="357" width="0.0139%" height="15" fill="rgb(215,21,27)" fg:x="43155" fg:w="6"/><text x="100.2361%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9861%" y="341" width="0.0139%" height="15" fill="rgb(232,23,21)" fg:x="43155" fg:w="6"/><text x="100.2361%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9884%" y="325" width="0.0116%" height="15" fill="rgb(244,5,23)" fg:x="43156" fg:w="5"/><text x="100.2384%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9884%" y="309" width="0.0116%" height="15" fill="rgb(226,81,46)" fg:x="43156" fg:w="5"/><text x="100.2384%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.01%)</title><rect x="99.9884%" y="293" width="0.0116%" height="15" fill="rgb(247,70,30)" fg:x="43156" fg:w="5"/><text x="100.2384%" y="303.50"></text></g></svg></svg>