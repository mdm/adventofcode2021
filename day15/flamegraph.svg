<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="58863"><g><title>priority_queue::priority_queue::left (37 samples, 0.06%)</title><rect x="0.0068%" y="469" width="0.0629%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="37"/><text x="0.2568%" y="479.50"></text></g><g><title>[[heap]] (89 samples, 0.15%)</title><rect x="0.0000%" y="485" width="0.1512%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="89"/><text x="0.2500%" y="495.50"></text></g><g><title>priority_queue::priority_queue::right (48 samples, 0.08%)</title><rect x="0.0697%" y="469" width="0.0815%" height="15" fill="rgb(221,193,54)" fg:x="41" fg:w="48"/><text x="0.3197%" y="479.50"></text></g><g><title>__free (17 samples, 0.03%)</title><rect x="0.1512%" y="469" width="0.0289%" height="15" fill="rgb(248,212,6)" fg:x="89" fg:w="17"/><text x="0.4012%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::erase_entry (10 samples, 0.02%)</title><rect x="0.1801%" y="469" width="0.0170%" height="15" fill="rgb(208,68,35)" fg:x="106" fg:w="10"/><text x="0.4301%" y="479.50"></text></g><g><title>[[stack]] (182 samples, 0.31%)</title><rect x="0.1512%" y="485" width="0.3092%" height="15" fill="rgb(232,128,0)" fg:x="89" fg:w="182"/><text x="0.4012%" y="495.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (152 samples, 0.26%)</title><rect x="0.2022%" y="469" width="0.2582%" height="15" fill="rgb(207,160,47)" fg:x="119" fg:w="152"/><text x="0.4522%" y="479.50"></text></g><g><title>day15::best_path_cost (287 samples, 0.49%)</title><rect x="0.4604%" y="469" width="0.4876%" height="15" fill="rgb(228,23,34)" fg:x="271" fg:w="287"/><text x="0.7104%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.02%)</title><rect x="0.9497%" y="469" width="0.0170%" height="15" fill="rgb(218,30,26)" fg:x="559" fg:w="10"/><text x="1.1997%" y="479.50"></text></g><g><title>priority_queue::priority_queue::left (102 samples, 0.17%)</title><rect x="0.9667%" y="469" width="0.1733%" height="15" fill="rgb(220,122,19)" fg:x="569" fg:w="102"/><text x="1.2167%" y="479.50"></text></g><g><title>[anon] (510 samples, 0.87%)</title><rect x="0.4604%" y="485" width="0.8664%" height="15" fill="rgb(250,228,42)" fg:x="271" fg:w="510"/><text x="0.7104%" y="495.50"></text></g><g><title>priority_queue::priority_queue::right (110 samples, 0.19%)</title><rect x="1.1399%" y="469" width="0.1869%" height="15" fill="rgb(240,193,28)" fg:x="671" fg:w="110"/><text x="1.3899%" y="479.50"></text></g><g><title>__GI___libc_malloc (37 samples, 0.06%)</title><rect x="1.3404%" y="469" width="0.0629%" height="15" fill="rgb(216,20,37)" fg:x="789" fg:w="37"/><text x="1.5904%" y="479.50"></text></g><g><title>__free (22 samples, 0.04%)</title><rect x="1.4033%" y="469" width="0.0374%" height="15" fill="rgb(206,188,39)" fg:x="826" fg:w="22"/><text x="1.6533%" y="479.50"></text></g><g><title>__rdl_alloc (28 samples, 0.05%)</title><rect x="1.4406%" y="469" width="0.0476%" height="15" fill="rgb(217,207,13)" fg:x="848" fg:w="28"/><text x="1.6906%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (28 samples, 0.05%)</title><rect x="1.4406%" y="453" width="0.0476%" height="15" fill="rgb(231,73,38)" fg:x="848" fg:w="28"/><text x="1.6906%" y="463.50"></text></g><g><title>_int_free (60 samples, 0.10%)</title><rect x="1.4882%" y="469" width="0.1019%" height="15" fill="rgb(225,20,46)" fg:x="876" fg:w="60"/><text x="1.7382%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (521 samples, 0.89%)</title><rect x="1.5901%" y="469" width="0.8851%" height="15" fill="rgb(210,31,41)" fg:x="936" fg:w="521"/><text x="1.8401%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (476 samples, 0.81%)</title><rect x="2.4820%" y="469" width="0.8087%" height="15" fill="rgb(221,200,47)" fg:x="1461" fg:w="476"/><text x="2.7320%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (51 samples, 0.09%)</title><rect x="3.2907%" y="469" width="0.0866%" height="15" fill="rgb(226,26,5)" fg:x="1937" fg:w="51"/><text x="3.5407%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (396 samples, 0.67%)</title><rect x="3.3773%" y="469" width="0.6727%" height="15" fill="rgb(249,33,26)" fg:x="1988" fg:w="396"/><text x="3.6273%" y="479.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (111 samples, 0.19%)</title><rect x="4.0501%" y="469" width="0.1886%" height="15" fill="rgb(235,183,28)" fg:x="2384" fg:w="111"/><text x="4.3001%" y="479.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (33 samples, 0.06%)</title><rect x="4.2387%" y="469" width="0.0561%" height="15" fill="rgb(221,5,38)" fg:x="2495" fg:w="33"/><text x="4.4887%" y="479.50"></text></g><g><title>indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (37 samples, 0.06%)</title><rect x="4.2947%" y="469" width="0.0629%" height="15" fill="rgb(247,18,42)" fg:x="2528" fg:w="37"/><text x="4.5447%" y="479.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (26 samples, 0.04%)</title><rect x="4.3576%" y="469" width="0.0442%" height="15" fill="rgb(241,131,45)" fg:x="2565" fg:w="26"/><text x="4.6076%" y="479.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (48 samples, 0.08%)</title><rect x="4.4017%" y="469" width="0.0815%" height="15" fill="rgb(249,31,29)" fg:x="2591" fg:w="48"/><text x="4.6517%" y="479.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (575 samples, 0.98%)</title><rect x="4.4833%" y="469" width="0.9768%" height="15" fill="rgb(225,111,53)" fg:x="2639" fg:w="575"/><text x="4.7333%" y="479.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (36 samples, 0.06%)</title><rect x="5.4601%" y="469" width="0.0612%" height="15" fill="rgb(238,160,17)" fg:x="3214" fg:w="36"/><text x="5.7101%" y="479.50"></text></g><g><title>[unknown] (2,528 samples, 4.29%)</title><rect x="1.3285%" y="485" width="4.2947%" height="15" fill="rgb(214,148,48)" fg:x="782" fg:w="2528"/><text x="1.5785%" y="495.50">[unkn..</text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (58 samples, 0.10%)</title><rect x="5.5247%" y="469" width="0.0985%" height="15" fill="rgb(232,36,49)" fg:x="3252" fg:w="58"/><text x="5.7747%" y="479.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="32.5196%" y="213" width="0.0289%" height="15" fill="rgb(209,103,24)" fg:x="19142" fg:w="17"/><text x="32.7696%" y="223.50"></text></g><g><title>[unknown] (16 samples, 0.03%)</title><rect x="32.5213%" y="197" width="0.0272%" height="15" fill="rgb(229,88,8)" fg:x="19143" fg:w="16"/><text x="32.7713%" y="207.50"></text></g><g><title>[unknown] (16 samples, 0.03%)</title><rect x="32.5213%" y="181" width="0.0272%" height="15" fill="rgb(213,181,19)" fg:x="19143" fg:w="16"/><text x="32.7713%" y="191.50"></text></g><g><title>[unknown] (15 samples, 0.03%)</title><rect x="32.5230%" y="165" width="0.0255%" height="15" fill="rgb(254,191,54)" fg:x="19144" fg:w="15"/><text x="32.7730%" y="175.50"></text></g><g><title>[unknown] (15 samples, 0.03%)</title><rect x="32.5230%" y="149" width="0.0255%" height="15" fill="rgb(241,83,37)" fg:x="19144" fg:w="15"/><text x="32.7730%" y="159.50"></text></g><g><title>[unknown] (15 samples, 0.03%)</title><rect x="32.5230%" y="133" width="0.0255%" height="15" fill="rgb(233,36,39)" fg:x="19144" fg:w="15"/><text x="32.7730%" y="143.50"></text></g><g><title>[unknown] (15 samples, 0.03%)</title><rect x="32.5230%" y="117" width="0.0255%" height="15" fill="rgb(226,3,54)" fg:x="19144" fg:w="15"/><text x="32.7730%" y="127.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="32.5264%" y="101" width="0.0221%" height="15" fill="rgb(245,192,40)" fg:x="19146" fg:w="13"/><text x="32.7764%" y="111.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="32.5281%" y="85" width="0.0204%" height="15" fill="rgb(238,167,29)" fg:x="19147" fg:w="12"/><text x="32.7781%" y="95.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="32.5281%" y="69" width="0.0204%" height="15" fill="rgb(232,182,51)" fg:x="19147" fg:w="12"/><text x="32.7781%" y="79.50"></text></g><g><title>[unknown] (10 samples, 0.02%)</title><rect x="32.5315%" y="53" width="0.0170%" height="15" fill="rgb(231,60,39)" fg:x="19149" fg:w="10"/><text x="32.7815%" y="63.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="32.5366%" y="37" width="0.0119%" height="15" fill="rgb(208,69,12)" fg:x="19152" fg:w="7"/><text x="32.7866%" y="47.50"></text></g><g><title>__GI___libc_malloc (442 samples, 0.75%)</title><rect x="32.5485%" y="213" width="0.7509%" height="15" fill="rgb(235,93,37)" fg:x="19159" fg:w="442"/><text x="32.7985%" y="223.50"></text></g><g><title>__free (265 samples, 0.45%)</title><rect x="33.2994%" y="213" width="0.4502%" height="15" fill="rgb(213,116,39)" fg:x="19601" fg:w="265"/><text x="33.5494%" y="223.50"></text></g><g><title>_int_free (185 samples, 0.31%)</title><rect x="33.4353%" y="197" width="0.3143%" height="15" fill="rgb(222,207,29)" fg:x="19681" fg:w="185"/><text x="33.6853%" y="207.50"></text></g><g><title>__rdl_alloc (31 samples, 0.05%)</title><rect x="33.7496%" y="213" width="0.0527%" height="15" fill="rgb(206,96,30)" fg:x="19866" fg:w="31"/><text x="33.9996%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (31 samples, 0.05%)</title><rect x="33.7496%" y="197" width="0.0527%" height="15" fill="rgb(218,138,4)" fg:x="19866" fg:w="31"/><text x="33.9996%" y="207.50"></text></g><g><title>__rdl_dealloc (22 samples, 0.04%)</title><rect x="33.8022%" y="213" width="0.0374%" height="15" fill="rgb(250,191,14)" fg:x="19897" fg:w="22"/><text x="34.0522%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (22 samples, 0.04%)</title><rect x="33.8022%" y="197" width="0.0374%" height="15" fill="rgb(239,60,40)" fg:x="19897" fg:w="22"/><text x="34.0522%" y="207.50"></text></g><g><title>__rust_alloc (27 samples, 0.05%)</title><rect x="33.8396%" y="213" width="0.0459%" height="15" fill="rgb(206,27,48)" fg:x="19919" fg:w="27"/><text x="34.0896%" y="223.50"></text></g><g><title>__rust_dealloc (25 samples, 0.04%)</title><rect x="33.8855%" y="213" width="0.0425%" height="15" fill="rgb(225,35,8)" fg:x="19946" fg:w="25"/><text x="34.1355%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (6,260 samples, 10.63%)</title><rect x="33.9279%" y="213" width="10.6349%" height="15" fill="rgb(250,213,24)" fg:x="19971" fg:w="6260"/><text x="34.1779%" y="223.50">hashbrown::map::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (3,385 samples, 5.75%)</title><rect x="38.8122%" y="197" width="5.7506%" height="15" fill="rgb(247,123,22)" fg:x="22846" fg:w="3385"/><text x="39.0622%" y="207.50">core::h..</text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="44.5526%" y="181" width="0.0102%" height="15" fill="rgb(231,138,38)" fg:x="26225" fg:w="6"/><text x="44.8026%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="44.5526%" y="165" width="0.0102%" height="15" fill="rgb(231,145,46)" fg:x="26225" fg:w="6"/><text x="44.8026%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="44.5526%" y="149" width="0.0102%" height="15" fill="rgb(251,118,11)" fg:x="26225" fg:w="6"/><text x="44.8026%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="44.5526%" y="133" width="0.0102%" height="15" fill="rgb(217,147,25)" fg:x="26225" fg:w="6"/><text x="44.8026%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="44.5526%" y="117" width="0.0102%" height="15" fill="rgb(247,81,37)" fg:x="26225" fg:w="6"/><text x="44.8026%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="44.5526%" y="101" width="0.0102%" height="15" fill="rgb(209,12,38)" fg:x="26225" fg:w="6"/><text x="44.8026%" y="111.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="44.5526%" y="85" width="0.0102%" height="15" fill="rgb(227,1,9)" fg:x="26225" fg:w="6"/><text x="44.8026%" y="95.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="44.5526%" y="69" width="0.0102%" height="15" fill="rgb(248,47,43)" fg:x="26225" fg:w="6"/><text x="44.8026%" y="79.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="44.5526%" y="53" width="0.0102%" height="15" fill="rgb(221,10,30)" fg:x="26225" fg:w="6"/><text x="44.8026%" y="63.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="44.5526%" y="37" width="0.0102%" height="15" fill="rgb(210,229,1)" fg:x="26225" fg:w="6"/><text x="44.8026%" y="47.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (3,216 samples, 5.46%)</title><rect x="44.5628%" y="213" width="5.4635%" height="15" fill="rgb(222,148,37)" fg:x="26231" fg:w="3216"/><text x="44.8128%" y="223.50">indexma..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (1,767 samples, 3.00%)</title><rect x="47.0244%" y="197" width="3.0019%" height="15" fill="rgb(234,67,33)" fg:x="27680" fg:w="1767"/><text x="47.2744%" y="207.50">cor..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (14,169 samples, 24.07%)</title><rect x="50.0263%" y="213" width="24.0711%" height="15" fill="rgb(247,98,35)" fg:x="29447" fg:w="14169"/><text x="50.2763%" y="223.50">indexmap::map::core::IndexMapCore&lt;K,V&gt;..</text></g><g><title>[unknown] (21 samples, 0.04%)</title><rect x="74.0618%" y="197" width="0.0357%" height="15" fill="rgb(247,138,52)" fg:x="43595" fg:w="21"/><text x="74.3118%" y="207.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="74.0669%" y="181" width="0.0306%" height="15" fill="rgb(213,79,30)" fg:x="43598" fg:w="18"/><text x="74.3169%" y="191.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="74.0669%" y="165" width="0.0306%" height="15" fill="rgb(246,177,23)" fg:x="43598" fg:w="18"/><text x="74.3169%" y="175.50"></text></g><g><title>[unknown] (16 samples, 0.03%)</title><rect x="74.0703%" y="149" width="0.0272%" height="15" fill="rgb(230,62,27)" fg:x="43600" fg:w="16"/><text x="74.3203%" y="159.50"></text></g><g><title>[unknown] (15 samples, 0.03%)</title><rect x="74.0720%" y="133" width="0.0255%" height="15" fill="rgb(216,154,8)" fg:x="43601" fg:w="15"/><text x="74.3220%" y="143.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="74.0754%" y="117" width="0.0221%" height="15" fill="rgb(244,35,45)" fg:x="43603" fg:w="13"/><text x="74.3254%" y="127.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="74.0754%" y="101" width="0.0221%" height="15" fill="rgb(251,115,12)" fg:x="43603" fg:w="13"/><text x="74.3254%" y="111.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="74.0754%" y="85" width="0.0221%" height="15" fill="rgb(240,54,50)" fg:x="43603" fg:w="13"/><text x="74.3254%" y="95.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="74.0754%" y="69" width="0.0221%" height="15" fill="rgb(233,84,52)" fg:x="43603" fg:w="13"/><text x="74.3254%" y="79.50"></text></g><g><title>[unknown] (12 samples, 0.02%)</title><rect x="74.0771%" y="53" width="0.0204%" height="15" fill="rgb(207,117,47)" fg:x="43604" fg:w="12"/><text x="74.3271%" y="63.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="74.0839%" y="37" width="0.0136%" height="15" fill="rgb(249,43,39)" fg:x="43608" fg:w="8"/><text x="74.3339%" y="47.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (1,965 samples, 3.34%)</title><rect x="74.0975%" y="213" width="3.3383%" height="15" fill="rgb(209,38,44)" fg:x="43616" fg:w="1965"/><text x="74.3475%" y="223.50">ind..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::erase_entry (1,443 samples, 2.45%)</title><rect x="74.9843%" y="197" width="2.4515%" height="15" fill="rgb(236,212,23)" fg:x="44138" fg:w="1443"/><text x="75.2343%" y="207.50">ha..</text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="93.8246%" y="197" width="0.0153%" height="15" fill="rgb(242,79,21)" fg:x="55228" fg:w="9"/><text x="94.0746%" y="207.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="93.8246%" y="181" width="0.0153%" height="15" fill="rgb(211,96,35)" fg:x="55228" fg:w="9"/><text x="94.0746%" y="191.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="93.8246%" y="165" width="0.0153%" height="15" fill="rgb(253,215,40)" fg:x="55228" fg:w="9"/><text x="94.0746%" y="175.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="93.8246%" y="149" width="0.0153%" height="15" fill="rgb(211,81,21)" fg:x="55228" fg:w="9"/><text x="94.0746%" y="159.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="93.8246%" y="133" width="0.0153%" height="15" fill="rgb(208,190,38)" fg:x="55228" fg:w="9"/><text x="94.0746%" y="143.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="93.8246%" y="117" width="0.0153%" height="15" fill="rgb(235,213,38)" fg:x="55228" fg:w="9"/><text x="94.0746%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="93.8297%" y="101" width="0.0102%" height="15" fill="rgb(237,122,38)" fg:x="55231" fg:w="6"/><text x="94.0797%" y="111.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="93.8297%" y="85" width="0.0102%" height="15" fill="rgb(244,218,35)" fg:x="55231" fg:w="6"/><text x="94.0797%" y="95.50"></text></g><g><title>priority_queue::priority_queue::left (139 samples, 0.24%)</title><rect x="93.8399%" y="197" width="0.2361%" height="15" fill="rgb(240,68,47)" fg:x="55237" fg:w="139"/><text x="94.0899%" y="207.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (9,952 samples, 16.91%)</title><rect x="77.4357%" y="213" width="16.9071%" height="15" fill="rgb(210,16,53)" fg:x="45581" fg:w="9952"/><text x="77.6857%" y="223.50">priority_queue::priority_q..</text></g><g><title>priority_queue::priority_queue::right (157 samples, 0.27%)</title><rect x="94.0761%" y="197" width="0.2667%" height="15" fill="rgb(235,124,12)" fg:x="55376" fg:w="157"/><text x="94.3261%" y="207.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1,024 samples, 1.74%)</title><rect x="95.1532%" y="197" width="1.7396%" height="15" fill="rgb(224,169,11)" fg:x="56010" fg:w="1024"/><text x="95.4032%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (459 samples, 0.78%)</title><rect x="96.1130%" y="181" width="0.7798%" height="15" fill="rgb(250,166,2)" fg:x="56575" fg:w="459"/><text x="96.3630%" y="191.50"></text></g><g><title>indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (934 samples, 1.59%)</title><rect x="96.8928%" y="197" width="1.5867%" height="15" fill="rgb(242,216,29)" fg:x="57034" fg:w="934"/><text x="97.1428%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (772 samples, 1.31%)</title><rect x="97.1680%" y="181" width="1.3115%" height="15" fill="rgb(230,116,27)" fg:x="57196" fg:w="772"/><text x="97.4180%" y="191.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (294 samples, 0.50%)</title><rect x="98.4795%" y="197" width="0.4995%" height="15" fill="rgb(228,99,48)" fg:x="57968" fg:w="294"/><text x="98.7295%" y="207.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (2,908 samples, 4.94%)</title><rect x="94.3428%" y="213" width="4.9403%" height="15" fill="rgb(253,11,6)" fg:x="55533" fg:w="2908"/><text x="94.5928%" y="223.50">priori..</text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (179 samples, 0.30%)</title><rect x="98.9790%" y="197" width="0.3041%" height="15" fill="rgb(247,143,39)" fg:x="58262" fg:w="179"/><text x="99.2290%" y="207.50"></text></g><g><title>priority_queue::priority_queue::parent (19 samples, 0.03%)</title><rect x="99.2508%" y="181" width="0.0323%" height="15" fill="rgb(236,97,10)" fg:x="58422" fg:w="19"/><text x="99.5008%" y="191.50"></text></g><g><title>day15::best_path_cost (55,422 samples, 94.15%)</title><rect x="5.6266%" y="229" width="94.1542%" height="15" fill="rgb(233,208,19)" fg:x="3312" fg:w="55422"/><text x="5.8766%" y="239.50">day15::best_path_cost</text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (293 samples, 0.50%)</title><rect x="99.2831%" y="213" width="0.4978%" height="15" fill="rgb(216,164,2)" fg:x="58441" fg:w="293"/><text x="99.5331%" y="223.50"></text></g><g><title>__libc_start_main_alias_2 (55,444 samples, 94.19%)</title><rect x="5.6232%" y="469" width="94.1916%" height="15" fill="rgb(220,129,5)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="479.50">__libc_start_main_alias_2</text></g><g><title>__libc_start_call_main (55,444 samples, 94.19%)</title><rect x="5.6232%" y="453" width="94.1916%" height="15" fill="rgb(242,17,10)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="463.50">__libc_start_call_main</text></g><g><title>main (55,444 samples, 94.19%)</title><rect x="5.6232%" y="437" width="94.1916%" height="15" fill="rgb(242,107,0)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="447.50">main</text></g><g><title>std::rt::lang_start_internal (55,444 samples, 94.19%)</title><rect x="5.6232%" y="421" width="94.1916%" height="15" fill="rgb(251,28,31)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="431.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (55,444 samples, 94.19%)</title><rect x="5.6232%" y="405" width="94.1916%" height="15" fill="rgb(233,223,10)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="415.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (55,444 samples, 94.19%)</title><rect x="5.6232%" y="389" width="94.1916%" height="15" fill="rgb(215,21,27)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="399.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (55,444 samples, 94.19%)</title><rect x="5.6232%" y="373" width="94.1916%" height="15" fill="rgb(232,23,21)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="383.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (55,444 samples, 94.19%)</title><rect x="5.6232%" y="357" width="94.1916%" height="15" fill="rgb(244,5,23)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="367.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (55,444 samples, 94.19%)</title><rect x="5.6232%" y="341" width="94.1916%" height="15" fill="rgb(226,81,46)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="351.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (55,444 samples, 94.19%)</title><rect x="5.6232%" y="325" width="94.1916%" height="15" fill="rgb(247,70,30)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="335.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (55,444 samples, 94.19%)</title><rect x="5.6232%" y="309" width="94.1916%" height="15" fill="rgb(212,68,19)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="319.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (55,444 samples, 94.19%)</title><rect x="5.6232%" y="293" width="94.1916%" height="15" fill="rgb(240,187,13)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="303.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (55,444 samples, 94.19%)</title><rect x="5.6232%" y="277" width="94.1916%" height="15" fill="rgb(223,113,26)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="287.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (55,444 samples, 94.19%)</title><rect x="5.6232%" y="261" width="94.1916%" height="15" fill="rgb(206,192,2)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="271.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>day15::main (55,444 samples, 94.19%)</title><rect x="5.6232%" y="245" width="94.1916%" height="15" fill="rgb(241,108,4)" fg:x="3310" fg:w="55444"/><text x="5.8732%" y="255.50">day15::main</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (20 samples, 0.03%)</title><rect x="99.7808%" y="229" width="0.0340%" height="15" fill="rgb(247,173,49)" fg:x="58734" fg:w="20"/><text x="100.0308%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.03%)</title><rect x="99.7876%" y="213" width="0.0272%" height="15" fill="rgb(224,114,35)" fg:x="58738" fg:w="16"/><text x="100.0376%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.02%)</title><rect x="99.7978%" y="197" width="0.0170%" height="15" fill="rgb(245,159,27)" fg:x="58744" fg:w="10"/><text x="100.0478%" y="207.50"></text></g><g><title>_start (55,445 samples, 94.19%)</title><rect x="5.6232%" y="485" width="94.1933%" height="15" fill="rgb(245,172,44)" fg:x="3310" fg:w="55445"/><text x="5.8732%" y="495.50">_start</text></g><g><title>indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (36 samples, 0.06%)</title><rect x="99.8199%" y="485" width="0.0612%" height="15" fill="rgb(236,23,11)" fg:x="58757" fg:w="36"/><text x="100.0699%" y="495.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (43 samples, 0.07%)</title><rect x="99.8811%" y="485" width="0.0731%" height="15" fill="rgb(205,117,38)" fg:x="58793" fg:w="43"/><text x="100.1311%" y="495.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (20 samples, 0.03%)</title><rect x="99.9541%" y="485" width="0.0340%" height="15" fill="rgb(237,72,25)" fg:x="58836" fg:w="20"/><text x="100.2041%" y="495.50"></text></g><g><title>day15 (58,857 samples, 99.99%)</title><rect x="0.0000%" y="501" width="99.9898%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="58857"/><text x="0.2500%" y="511.50">day15</text></g><g><title>all (58,863 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="58863"/><text x="0.2500%" y="527.50"></text></g><g><title>perf-exec (6 samples, 0.01%)</title><rect x="99.9898%" y="501" width="0.0102%" height="15" fill="rgb(235,36,10)" fg:x="58857" fg:w="6"/><text x="100.2398%" y="511.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9898%" y="485" width="0.0102%" height="15" fill="rgb(251,123,47)" fg:x="58857" fg:w="6"/><text x="100.2398%" y="495.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9898%" y="469" width="0.0102%" height="15" fill="rgb(221,13,13)" fg:x="58857" fg:w="6"/><text x="100.2398%" y="479.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9898%" y="453" width="0.0102%" height="15" fill="rgb(238,131,9)" fg:x="58857" fg:w="6"/><text x="100.2398%" y="463.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9898%" y="437" width="0.0102%" height="15" fill="rgb(211,50,8)" fg:x="58857" fg:w="6"/><text x="100.2398%" y="447.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9898%" y="421" width="0.0102%" height="15" fill="rgb(245,182,24)" fg:x="58857" fg:w="6"/><text x="100.2398%" y="431.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9898%" y="405" width="0.0102%" height="15" fill="rgb(242,14,37)" fg:x="58857" fg:w="6"/><text x="100.2398%" y="415.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9898%" y="389" width="0.0102%" height="15" fill="rgb(246,228,12)" fg:x="58857" fg:w="6"/><text x="100.2398%" y="399.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9898%" y="373" width="0.0102%" height="15" fill="rgb(213,55,15)" fg:x="58857" fg:w="6"/><text x="100.2398%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9898%" y="357" width="0.0102%" height="15" fill="rgb(209,9,3)" fg:x="58857" fg:w="6"/><text x="100.2398%" y="367.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9898%" y="341" width="0.0102%" height="15" fill="rgb(230,59,30)" fg:x="58857" fg:w="6"/><text x="100.2398%" y="351.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9898%" y="325" width="0.0102%" height="15" fill="rgb(209,121,21)" fg:x="58857" fg:w="6"/><text x="100.2398%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="99.9898%" y="309" width="0.0102%" height="15" fill="rgb(220,109,13)" fg:x="58857" fg:w="6"/><text x="100.2398%" y="319.50"></text></g></svg></svg>